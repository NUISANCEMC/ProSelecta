#!/bin/bash

if ! type add_to_PATH &> /dev/null; then

### Adapted from https://unix.stackexchange.com/questions/4965/keep-duplicates-out-of-path-on-source
function add_to_PATH () {
  for d; do

    d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
    if [ -z "$d" ]; then continue; fi  # skip nonexistent directory

    if [ "$d" == "/usr/bin" ] || [ "$d" == "/usr/bin64" ] || [ "$d" == "/usr/local/bin" ] || [ "$d" == "/usr/local/bin64" ]; then
      case ":$PATH:" in
        *":$d:"*) :;;
        *) export PATH=$PATH:$d;;
      esac
    else
      case ":$PATH:" in
        *":$d:"*) :;;
        *) export PATH=$d:$PATH;;
      esac
    fi
  done
}

fi

if ! type add_to_LD_LIBRARY_PATH &> /dev/null; then

function add_to_LD_LIBRARY_PATH () {
  for d; do

    d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
    if [ -z "$d" ]; then continue; fi  # skip nonexistent directory

    if [ "$d" == "/usr/lib" ] || [ "$d" == "/usr/lib64" ] || [ "$d" == "/usr/local/lib" ] || [ "$d" == "/usr/local/lib64" ]; then
      case ":$LD_LIBRARY_PATH:" in
        *":$d:"*) :;;
        *) export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$d;;
      esac
    else
      case ":$LD_LIBRARY_PATH:" in
        *":$d:"*) :;;
        *) export LD_LIBRARY_PATH=$d:$LD_LIBRARY_PATH;;
      esac
    fi
  done
}

fi

if ! type add_to_PYTHONPATH &> /dev/null; then

 function add_to_PYTHONPATH () {
   for d; do

     d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
     if [ -z "$d" ]; then continue; fi  # skip nonexistent directory

     if [ "$d" == "/usr/lib" ] || [ "$d" == "/usr/lib64" ] || [ "$d" == "/usr/local/lib" ] || [ "$d" == "/usr/local/lib64" ]; then
       case ":$PYTHONPATH:" in
         *":$d:"*) :;;
         *) export PYTHONPATH=$PYTHONPATH:$d;;
       esac
     else
       case ":$PYTHONPATH:" in
         *":$d:"*) :;;
         *) export PYTHONPATH=$d:$PYTHONPATH;;
       esac
     fi
   done
 }

fi

if ! type add_to_ProSelecta_INCLUDE_PATH &> /dev/null; then

 function add_to_ProSelecta_INCLUDE_PATH () {
   for d; do

     d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
     if [ -z "$d" ]; then continue; fi  # skip nonexistent directory

     if [ "$d" == "/usr/lib" ] || [ "$d" == "/usr/lib64" ] || [ "$d" == "/usr/local/lib" ] || [ "$d" == "/usr/local/lib64" ]; then
       case ":$ProSelecta_INCLUDE_PATH:" in
         *":$d:"*) :;;
         *) export ProSelecta_INCLUDE_PATH=$ProSelecta_INCLUDE_PATH:$d;;
       esac
     else
       case ":$ProSelecta_INCLUDE_PATH:" in
         *":$d:"*) :;;
         *) export ProSelecta_INCLUDE_PATH=$d:$ProSelecta_INCLUDE_PATH;;
       esac
     fi
   done
 }

fi

ProSelecta_ROOT=@CMAKE_INSTALL_PREFIX@

add_to_PATH ${ProSelecta_ROOT}/bin
add_to_LD_LIBRARY_PATH ${ProSelecta_ROOT}/lib

add_to_ProSelecta_INCLUDE_PATH ${ProSelecta_ROOT}/include

add_to_ProSelecta_INCLUDE_PATH @ProSelecta_HEPMC3_INCLUDE_DIR@

if [ -e ${ProSelecta_ROOT}/lib64 ]; then
  add_to_LD_LIBRARY_PATH ${ProSelecta_ROOT}/lib64
fi

if [ -e ${ProSelecta_ROOT}/python/@Python3_VERSION_MAJOR@.@Python3_VERSION_MINOR@ ]; then
  add_to_PYTHONPATH ${ProSelecta_ROOT}/python/@Python3_VERSION_MAJOR@.@Python3_VERSION_MINOR@
fi